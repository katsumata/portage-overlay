diff --git a/doc/ip-tunnels.tex b/doc/ip-tunnels.tex
index 0a8c930..d2c68f5 100644
--- a/doc/ip-tunnels.tex
+++ b/doc/ip-tunnels.tex
@@ -148,7 +148,8 @@ listed in the following table:
 Mode & Description  & Base device \\
 ipip & IP over IP & tunl0 \\
 sit & IPv6 over IP & sit0 \\
-gre & ANY over GRE over IP & gre0
+gre & ANY over GRE over IP & gre0 \\
+etherip & Ethernet over IP & etherip0
 \end{tabular}
 
 \vspace{2mm}
@@ -166,8 +167,8 @@ different tunnel characteristics.
 \begin{itemize}
 
 \item
-\verb|mode <MODE>| sets tunnel mode. Three modes are available now
-	\verb|ipip|, \verb|sit| and \verb|gre|.
+\verb|mode <MODE>| sets tunnel mode. Four modes are available now
+	\verb|ipip|, \verb|sit|, \verb|gre| and \verb|etherip|.
 
 \item
 \verb|remote <D>| sets remote endpoint of the tunnel to IP
@@ -250,8 +251,8 @@ Command \verb|ip tunnel add| has several additional options.
 
 \end{itemize}
 
-\verb|ipip| and \verb|sit| tunnels have no more options. \verb|gre|
-tunnels are more complicated:
+\verb|ipip|, \verb|sit| and \verb|etherip| tunnels have no more options.
+\verb|gre| tunnels are more complicated:
 
 \begin{itemize}
 
diff --git a/include/utils.h b/include/utils.h
index f7ef939..a410d27 100644
--- a/include/utils.h
+++ b/include/utils.h
@@ -24,6 +24,9 @@ extern char * _SL_;
 #ifndef IPPROTO_AH
 #define IPPROTO_AH	51
 #endif
+#ifndef IPPROTO_ETHERIP
+#define IPPROTO_ETHERIP	97
+#endif
 #ifndef IPPROTO_COMP
 #define IPPROTO_COMP	108
 #endif
diff --git a/ip/iptunnel.c b/ip/iptunnel.c
index 338d8bd..c92c78a 100644
--- a/ip/iptunnel.c
+++ b/ip/iptunnel.c
@@ -14,6 +14,7 @@
  * Rani Assaf <rani@magic.metawire.com> 980929:	resolve addresses
  * Rani Assaf <rani@magic.metawire.com> 980930:	do not allow key for ipip/sit
  * Phil Karn <karn@ka9q.ampr.org>	990408:	"pmtudisc" flag
+ * Lennert Buytenhek <buytenh@wantstofly.org> 050112: etherip support
  */
 
 #include <stdio.h>
@@ -34,12 +35,16 @@
 #include "ip_common.h"
 #include "tunnel.h"
 
+#ifndef ARPHRD_ETHERIP
+#define ARPHRD_ETHERIP 0xEEE
+#endif
+
 static void usage(void) __attribute__((noreturn));
 
 static void usage(void)
 {
 	fprintf(stderr, "Usage: ip tunnel { add | change | del | show | prl } [ NAME ]\n");
-	fprintf(stderr, "          [ mode { ipip | gre | sit | isatap } ] [ remote ADDR ] [ local ADDR ]\n");
+	fprintf(stderr, "          [ mode { ipip | gre | sit | isatap | etherip } ] [ remote ADDR ] [ local ADDR ]\n");
 	fprintf(stderr, "          [ [i|o]seq ] [ [i|o]key KEY ] [ [i|o]csum ]\n");
 	fprintf(stderr, "          [ prl-default ADDR ] [ prl-nodefault ADDR ] [ prl-delete ADDR ]\n");
 	fprintf(stderr, "          [ ttl TTL ] [ tos TOS ] [ [no]pmtudisc ] [ dev PHYS_DEV ]\n");
@@ -99,6 +104,13 @@ static int parse_args(int argc, char **argv, int cmd, struct ip_tunnel_parm *p)
 				}
 				p->iph.protocol = IPPROTO_IPV6;
 				isatap++;
+			} else if (strcmp(*argv, "etherip") == 0 ||
+				   strcmp(*argv, "ether/ip") == 0) {
+				if (p->iph.protocol && p->iph.protocol != IPPROTO_ETHERIP) {
+					fprintf(stderr,"You managed to ask for more than one tunnel mode.\n");
+					exit(-1);
+				}
+				p->iph.protocol = IPPROTO_ETHERIP;
 			} else {
 				fprintf(stderr,"Cannot guess tunnel mode.\n");
 				exit(-1);
@@ -225,12 +237,14 @@ static int parse_args(int argc, char **argv, int cmd, struct ip_tunnel_parm *p)
 		else if (memcmp(p->name, "isatap", 6) == 0) {
 			p->iph.protocol = IPPROTO_IPV6;
 			isatap++;
+		}else if(memcmp(p->name, "etherip", 7) == 0) {
+			p->iph.protocol = IPPROTO_ETHERIP;
 		}
 	}
 
-	if (p->iph.protocol == IPPROTO_IPIP || p->iph.protocol == IPPROTO_IPV6) {
+	if (p->iph.protocol == IPPROTO_IPIP || p->iph.protocol == IPPROTO_IPV6 || p->iph.protocol == IPPROTO_ETHERIP) {
 		if ((p->i_flags & GRE_KEY) || (p->o_flags & GRE_KEY)) {
-			fprintf(stderr, "Keys are not allowed with ipip and sit.\n");
+			fprintf(stderr, "Keys are not allowed with ipip, sit and etherip.\n");
 			return -1;
 		}
 	}
@@ -271,6 +285,13 @@ static int do_add(int cmd, int argc, char **argv)
 		fprintf(stderr, "ttl != 0 and noptmudisc are incompatible\n");
 		return -1;
 	}
+	if (p.iph.protocol == IPPROTO_ETHERIP) {
+		if ((cmd == SIOCADDTUNNEL || cmd == SIOCCHGTUNNEL) && !p.iph.daddr) {
+			fprintf(stderr, "EtherIP tunnel requires a "
+					"destination address.\n");
+			return -1;
+		}
+	}
 
 	switch (p.iph.protocol) {
 	case IPPROTO_IPIP:
@@ -279,8 +300,10 @@ static int do_add(int cmd, int argc, char **argv)
 		return tnl_add_ioctl(cmd, "gre0", p.name, &p);
 	case IPPROTO_IPV6:
 		return tnl_add_ioctl(cmd, "sit0", p.name, &p);
+	case IPPROTO_ETHERIP:
+		return tnl_add_ioctl(cmd, "ethip0", p.name, &p);
 	default:
-		fprintf(stderr, "cannot determine tunnel mode (ipip, gre or sit)\n");
+		fprintf(stderr, "cannot determine tunnel mode (ipip, gre, sit or etherip)\n");
 		return -1;
 	}
 	return -1;
@@ -300,6 +323,8 @@ static int do_del(int argc, char **argv)
 		return tnl_del_ioctl("gre0", p.name, &p);
 	case IPPROTO_IPV6:
 		return tnl_del_ioctl("sit0", p.name, &p);
+	case IPPROTO_ETHERIP:
+		return tnl_del_ioctl("etherip0", p.name, &p);
 	default:
 		return tnl_del_ioctl(p.name, p.name, &p);
 	}
@@ -353,19 +378,19 @@ static void print_tunnel(struct ip_tunnel_parm *p)
 	if (p->iph.ttl)
 		printf(" ttl %d ", p->iph.ttl);
 	else
-		printf(" ttl inherit ");
+		printf(" ttl %s", p->iph.protocol != IPPROTO_ETHERIP ? "inherit " : "default");
 
 	if (p->iph.tos) {
 		SPRINT_BUF(b1);
 		printf(" tos");
 		if (p->iph.tos&1)
-			printf(" inherit");
+			printf(" %s", p->iph.protocol != IPPROTO_ETHERIP ? "inherit" : "default");
 		if (p->iph.tos&~1)
 			printf("%c%s ", p->iph.tos&1 ? '/' : ' ',
 			       rtnl_dsfield_n2a(p->iph.tos&~1, b1, sizeof(b1)));
 	}
 
-	if (!(p->iph.frag_off&htons(IP_DF)))
+	if (p->iph.protocol != IPPROTO_ETHERIP && !(p->iph.frag_off&htons(IP_DF)))
 		printf(" nopmtudisc");
 
 	if ((p->i_flags&GRE_KEY) && (p->o_flags&GRE_KEY) && p->o_key == p->i_key)
@@ -428,7 +453,10 @@ static int do_tunnels_list(struct ip_tunnel_parm *p)
 			fprintf(stderr, "Failed to get type of [%s]\n", name);
 			continue;
 		}
-		if (type != ARPHRD_TUNNEL && type != ARPHRD_IPGRE && type != ARPHRD_SIT)
+		if (type != ARPHRD_TUNNEL &&
+		    type != ARPHRD_IPGRE &&
+		    type != ARPHRD_SIT &&
+		    type != ARPHRD_ETHERIP)
 			continue;
 		memset(&p1, 0, sizeof(p1));
 		if (tnl_get_ioctl(name, &p1))
@@ -472,6 +500,9 @@ static int do_show(int argc, char **argv)
 	case IPPROTO_IPV6:
 		err = tnl_get_ioctl(p.name[0] ? p.name : "sit0", &p);
 		break;
+	case IPPROTO_ETHERIP:
+		err = tnl_get_ioctl(p.name[0] ? p.name : "ethip0", &p);
+		break;
 	default:
 		do_tunnels_list(&p);
 		return 0;
diff --git a/ip/tunnel.c b/ip/tunnel.c
index d1296e6..5328f6f 100644
--- a/ip/tunnel.c
+++ b/ip/tunnel.c
@@ -51,6 +51,9 @@ const char *tnl_strproto(__u8 proto)
 	case IPPROTO_IPV6:
 		strcpy(buf, "ipv6");
 		break;
+	case IPPROTO_ETHERIP:
+		strcpy(buf, "etherip");
+		break;
 	case 0:
 		strcpy(buf, "any");
 		break;
diff --git a/lib/ll_types.c b/lib/ll_types.c
index 9d75bd2..609bc83 100644
--- a/lib/ll_types.c
+++ b/lib/ll_types.c
@@ -125,6 +125,9 @@ __PF(IEEE80211_PRISM,ieee802.11/prism)
 #ifdef ARPHRD_IEEE80211_RADIOTAP
 __PF(IEEE80211_RADIOTAP,ieee802.11/radiotap)
 #endif
+#ifdef ARPHRD_ETHERIP
+__PF(ETHERIP, etherip)
+#endif
 #ifdef ARPHRD_VOID
 __PF(VOID,void)
 #endif
